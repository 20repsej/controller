#!/bin/bash
# Let's Robot Install script
# See LICENSE for copyright and license details
# Version 1.1


INTERACTIVE=true
calc_wt_size() {
    WT_HEIGHT=17
    WT_WIDTH=$(tput cols)

    if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
        WT_WIDTH = 78
    fi

    if [ "$WT_WIDTH" -gt 178 ]; then
        WT_WIDTH=118
    fi

    WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

# TODO write to file instead of returning 0 on everything

do_robot_owner() {
    ROBOT_OWNER=$(whiptail --inputbox "Please enter your letsrobot.tv username" 20 60 "" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
        # Set the robot owner
        return 0
    fi
}

do_robot_id() {
    ROBOT_ID=$(whiptail --inputbox "Please enter your robot ID." 20 60 "" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
        #sed -i -e "s/<RobotID>/$ROBOT_ID/g" letsrobot.conf
        return 0

    fi
}

do_camera_id() {
    CAMERA_ID=$(whiptail --inputbox "Please enter your camera ID." 20 60 "" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
        #sed -i -e "s/<CameraID>/$CAMERA_ID/g" letsrobot.conf
        return 0

    fi
}

do_robot_type() {
    ROBOT_TYPE=$(whiptail --radiolist "Choose a robot type" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        "serial_board" "Serial" ON \
        "motor_hat" "Adafruit Motor Hat" OFF \
        "gopigo2" "GoPiGo2" OFF \
        "gopigo3" "GoPiGo3" OFF \
        "l298n" "L298N" OFF \
        "motozero" "Motozero" OFF \
        "pololu" "Pololu" OFF \
        "adafruit_pwm" "Adafruit PWM" OFF \
        "owi_arm" "OWI Arm" OFF \
        "none" "None" OFF \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        #sed -i -e "s/<RobotType>/$ROBOT_TYPE/g" letsrobot.conf
        return 0

    fi
}

do_stream_key() {
    STREAM_KEY=$(whiptail --passwordbox "Please enter your stream key" 20 60 "" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        #sed -i -e "s/<StreamKey>/$STREAM_KEY/g" letsrobot.conf
        return 0

    fi
}

do_api_key() {
    API_KEY=$(whiptail --passwordbox "Please enter your API key" 20 60 "" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)  
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        #sed -i -e "s/<APIKey>/$API_KEY/g" letsrobot.conf
        return 0

    fi
}

# owner, robot id, camera id, type, stream key, api key
do_robot_menu() {
    FUN=$(whiptail --title "Let's Robot Install" --menu "Robot Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "R1 Owner" "This is your username on the letsrobot site." \
        "R2 Robot ID" "Your robots ID." \
        "R3 Camera ID" "You robots camera ID." \
        "R4 Type" "Motor controller type for your robot." \
        "R5 Stream Key" "Your stream key." \
        "R6 API Key" "Your API key (Optional)" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            R1\ *) do_robot_owner ;;
            R2\ *) do_robot_id ;;
            R3\ *) do_camera_id ;;
            R4\ *) do_robot_type ;;
            R5\ *) do_stream_key ;;
            R6\ *) do_api_key ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

# no camera, no mic, type, x res, y res, camera device, audio hardware number
do_camera_menu() {
    FUN=$(whiptail --title "Let's Robot Config" --menu)
}

# ffmpeg location, v4l2-ctl location, audio codec, audio channels, audio bitrate, audio sample rate, video codec, video bitrate, audio input format, audio input device, autio input options, audio output options, video input format, video input options, video output options, arecord path, arecord format
do_ffmpeg_menu() {

}

do_tts_type() {
    TTS_TYPE=$(whiptail --radiolist "Choose a robot type" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
               "ESpeak" "ESpeak" ON \
               "Pico" "Pico" OFF \
               "Festival" "Festival" OFF \
               "None" "None" OFF \
               3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        #sed -i -e "s/<TTSType>/$TTS_TYPE/g" letsrobot.conf
        return 0

    fi
}

do_tts_volume() {
    TTS_VOLUME=$(whiptail --inputbox "Choose how loud you want TTS to be (0-100)" 20 60 "" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        # Do the thing
        return 0

    fi
}

do_tts_anon() {
    TTS_ANON=$(whiptail --yesno "Would you like to enable TTS For guest accounts?" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        # enable anons
        return 0
    elif [ $RET -eq 1 ]; then
        # disable anons
        return 0
    else
        return $RET
    fi
}

do_tts_urls() {
    TTS_URLS=$(whiptail --yesno "Would you like to have TTS speak URLs?" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        # enable TTS URLs
        return 0
    elif [ $RET -eq 1 ]; then
        # disable TTS URLs
        return 0
    else
        return $RET
    fi
}

do_tts_ext_chat() {
    TTS_EXT_CHAT=$(whiptail --yesno "Would you like to enable extended chat commands?" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        # Enable extended chat
        return 0
    elif [ $RET -eq 1 ]; then
        # disable extended chat
        return 0
    else
        return $RET
    fi
}

do_tts_hw_number() {
    TTS_HW_NUM=$(whiptail --inputbox "Please enter your speaker hardware number." 20 60 "0" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        # Set the hardware number
        return 0
    fi
}

# type, volume, anon, filter urls, ext chat, hw number, espeak, festival, polly, pico
do_tts_menu() {
    FUN=$(whiptail --title "Let's Robot Install" --menu "TTS Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "T1 Type" "Specify the TTS Engine you are using here." \
        "T2 Volume" "How loud you want it to be" \
        "T3 Anon" "Enable or disable anon messages" \
        "T4 Filter URLs" "Enable or Disable URls from being spoken" \
        "T5 Extended Chat" "Enable or Disable extended chat commands" \
        "T6 Hardware Number" "ALSA HW Number for your playback device" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            T1\ *) do_tts_type ;;
            T2\ *) do_tts_volume ;;
            T3\ *) do_tts_anon ;;
            T4\ *) do_tts_urls ;;
            T5\ *) do_tts_ext_chat ;;
            T6\ *) do_tts_hw_number ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

# cozmo, adafruit pwm, owi arm, serial, motor hat, gopigo2, gopigo3, l298n, motozero, pololu, mc33926, max7219
do_board_menu() {

}

do_no_camera() {
    NO_CAMERA=$(whiptail --yesno "Disable the camera?" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        # Disable the camera
        return 0
    elif [ $RET -eq 1 ]; then
        # Enable the camera
        return 0
    else
        return $RET
    fi

}

do_video_type() {
    VIDEO_TYPE=$(whiptail --radiolist "Choose a video encoder type" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
               "ffmpeg" "FFMPEG" ON \
               "none" "None" OFF \
               3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        # Set the video type
        return 0
    fi
}

# TODO set xres and yres at the same time

do_video_xres() {
    XRES=$(whiptail --inputbox "Enter an x resolution" 20 60 "640" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        # Set the x resolution
        return 0
    fi
}

do_video_yres() {
    YRES=$(whiptail --inputbox "Enter a y resolution" 20 60 "480" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        # Set the y resolution
        return 0
    fi
}

do_video_device_number() {
    VIDEO_DEVICE_NUM=$(whiptail --inputbox "Enter a video device number" 20 60 "0" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        # Set device number
        return 0
    fi
}

do_video_bitrate() {
    VIDEO_BITRATE=$(whiptail --inputbox "Enter a bitrate" 20 60 "512" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        # Set bitrate
        return 0
    fi
}

do_video_menu() {
    FUN=$(whiptail --title "Let\'s Robot Install" --menu "Video Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "V1 No Camera" "Enable or Disable the camera." \
        "V2 Type" "Specify the video encoder you are using" \
        "V3 X res" "X resolution to capture video" \
        "V4 Y res" "Y resolution to capture video" \
        "V5 Device Number" "Device Number of your camera" \
        "V6 Bitrate" "Bitrate to encode video"\
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            V1\ *) do_no_camera ;;
            V2\ *) do_video_type ;;
            V3\ *) do_video_xres ;;
            V4\ *) do_video_yres ;;
            V5\ *) do_video_device_number ;;
            V6\ *) do_video_bitrate ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_no_mic() {
    NO_MIC=$(whiptail --yesno "Disable the microphone?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        # Disable the microphone
        return 0
    elif [ $RET -eq 1 ]; then
        # Enable the microphone
        return 0
    else
        return $RET
    fi
}

do_mic_type() {
    MIC_TYPE=$(whiptail --radiolist "Choose a microphone encoder type" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
               "ffmpeg" "FFMPEG" ON \
               "none" "None" OFF \
               3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        # Set the microphone type
        return 0
    fi
}

do_mic_device_number() {
    MIC_DEVICE_NUM=$(whiptail --inputbox "enter a microphone device number" 20 60 "" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        # set the microphone device number
        return 0
    fi
}

do_mic_bitrate() {
    MIC_BITRATE=$(whiptail --inputbox "Enter a bitrate" 20 60 "512" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        # Set bitrate
        return 0
    fi
}

do_microphone_menu() {
    FUN=$(whiptail --title "Let\'s Robot Install" --menu "TTS Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "M1 No Mic" "Enable or Disable the Microphone" \
        "M2 Type" "Specify the audio encoder" \
        "M3 Device Number" "Microphone device number" \
        "M4 Bitrate" "Bitrate to encode video" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            M1\ *) do_no_mic ;;
            M2\ *) do_mic_type ;;
            M3\ *) do_mic_device_number ;;
            M4\ *) do_mic_bitrate ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_finish() {
    whiptail --yesno "Are you sure you're finished?" 20 60 2
    if [ $? -eq 0 ]; then # yes
        exit 0
    fi
}

# In testing, the next 3 lines will cause an error that can safely be ignored
# the copy command will fail. "cp: cannot stat '~/letsrobot/letsrobot.sample.conf': no such file or directory"
CONF_FILE="~/letsrobot.conf"
REPO_DIR="~/letsrobot"
cp ${REPO_DIR}/letsrobot.sample.conf $CONF_FILE
if [ "$INTERACTIVE" = true ]; then
    calc_wt_size
    while true; do
        FUN=$(whiptail --title "Let's Robot Install" --menu "Main Menu" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
        #    "1  Robot" "Set basic robot parameters here" \
        #    "2  TTS" "Set TTS Settings here" \
        #    "3  Video" "Set Video Settings here" \
        #    "4  Microphone" "Set Microphone settings here" \
        #    
            "1  Robot" "Set basic robot parameters here" \
            "2  Camera" "Set camera and microphone settings here" \
            "3  ffmpeg" "Set FFMPEG settings here" \
            "4  TTS" "Set Text-To-Speech settings here" \
            "5  Board" "Set board specific settings here" \
            "6  Messenger" "Optional settings used when sending messages from the robot back to the chat" \
            "7  Misc" "Miscellanious options you probably don't need to change" \
            3>&1 1>&2 2>&3)
        RET=$?
        if [ $RET -eq 1 ]; then
            do_finish
        elif [ $RET -eq 0 ]; then
            case "$FUN" in
                1\ *) do_robot_menu ;;
                2\ *) do_camera_menu ;;
                3\ *) do_ffmpeg_menu ;;
                4\ *) do_tts_menu ;;
                5\ *) do_board_menu ;;

            #   1\ *) do_robot_menu ;;
            #   2\ *) do_tts_menu ;;
            #   3\ *) do_video_menu ;;
            #   4\ *) do_microphone_menu ;;
                *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
            esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
        fi
    done
fi
