#!/bin/bash
# Let's Robot Config script
# See LICENSE for copyright and license details
# Version 1.2


INTERACTIVE=true
calc_wt_size() {
    WT_HEIGHT=17
    WT_WIDTH=$(tput cols)

    if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
        WT_WIDTH = 78
    fi

    if [ "$WT_WIDTH" -gt 178 ]; then
        WT_WIDTH=118
    fi

    WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

# TODO write to file instead of returning 0 on everything

do_robot_owner() {
    ROBOT_OWNER=$(whiptail --inputbox "Please enter your letsrobot.tv username" 20 60 "YourLetsRobotUserName" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
        sed -i "/^\[robot]/,/^\[/{s/^owner[[:space:]]*=.*/owner=$ROBOT_OWNER/}" $CONF_FILE
    fi
}

do_robot_id() {
    ROBOT_ID=$(whiptail --inputbox "Please enter your robot ID." 20 60 "YourRobotID" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
        sed -i "/^\[robot]/,/^\[/{s/^robot_id[[:space:]]*=.*/robot_id=$ROBOT_ID/}" $CONF_FILE
    fi
}

do_camera_id() {
    CAMERA_ID=$(whiptail --inputbox "Please enter your camera ID." 20 60 "YourCameraID" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
        sed -i "/^\[robot]/,/^\[/{s/^camera_id[[:space:]]*=.*/camera_id=$CAMERA_ID/}" $CONF_FILE
    fi
}

do_robot_type() {
    ROBOT_TYPE=$(whiptail --radiolist "Choose a robot type" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        "serial_board" "Serial" OFF \
        "motor_hat" "Adafruit Motor Hat" OFF \
        "gopigo2" "GoPiGo2" OFF \
        "gopigo3" "GoPiGo3" OFF \
        "l298n" "L298N" OFF \
        "motozero" "Motozero" OFF \
        "pololu" "Pololu" OFF \
        "adafruit_pwm" "Adafruit PWM" OFF \
        "owi_arm" "OWI Arm" OFF \
        "none" "None" ON \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[robot]/,/^\[/{s/^type[[:space:]]*=.*/type=$ROBOT_TYPE/}" $CONF_FILE
    fi
}

do_stream_key() {
    STREAM_KEY=$(whiptail --passwordbox "Please enter your stream key" 20 60 "hello" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[robot]/,/^\[/{s/^stream_key[[:space:]]*=.*/stream_key=$STREAM_KEY/}" $CONF_FILE
    fi
}

do_api_key() {
    API_KEY=$(whiptail --passwordbox "Please enter your API key" 20 60 "" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)  
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[robot]/,/^\[/{s/^api_key[[:space:]]*=.*/api_key=$API_KEY/}" $CONF_FILE
    fi
}

# owner, robot id, camera id, type, stream key, api key
# Ignore turn_delay and straight_delay for the moment. Handled in other areas
do_robot_menu() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Robot Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "R1 Owner" "This is your username on the letsrobot site." \
        "R2 Robot ID" "Your robots ID." \
        "R3 Camera ID" "You robots camera ID." \
        "R4 Type" "Motor controller type for your robot." \
        "R5 Stream Key" "Your stream key." \
        "R6 API Key" "Your API key (Optional)" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            R1\ *) do_robot_owner ;;
            R2\ *) do_robot_id ;;
            R3\ *) do_camera_id ;;
            R4\ *) do_robot_type ;;
            R5\ *) do_stream_key ;;
            R6\ *) do_api_key ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_no_camera() {
    NO_CAMERA=$(whiptail --yesno "Disable the camera?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        return 0
    elif [ $RET -eq 1 ]; then
        sed -i "/^\[camera]/,/^\[/{s/^no_camera[[:space:]]*=.*/no_camera=$NO_CAMERA/}" $CONF_FILE
    else
        return $RET
    fi

}

do_no_mic() {
    NO_MIC=$(whiptail --yesno "Disable the microphone?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        return 0
    elif [ $RET -eq 1 ]; then
        sed -i "/^\[camera]/,/^\[/{s/^no_mic[[:space:]]*=.*/no_mic=$NO_MIC/}" $CONF_FILE
    else
        return $RET
    fi
}

do_camera_type() {
    CAMERA_TYPE=$(whiptail --radiolist "Choose an a/v encoder type" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
               "ffmpeg" "FFMPEG" ON \
               "ffmpeg-arecord" OFF \
               "none" "None" OFF \
               3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[camera]/,/^\[/{s/^type[[:space:]]*=.*/type=$CAMERA_TYPE/}" $CONF_FILE
    fi
}

do_low_resolution() {
    sed -i "/^\[camera]/,/^\[/{s/^x_res[[:space:]]*=.*/x_res=640/}" $CONF_FILE
    sed -i "/^\[camera]/,/^\[/{s/^y_res[[:space:]]*=.*/y_res=480/}" $CONF_FILE
}

do_default_resolution() {
    sed -i "/^\[camera]/,/^\[/{s/^x_res[[:space:]]*=.*/x_res=768/}" $CONF_FILE
    sed -i "/^\[camera]/,/^\[/{s/^y_res[[:space:]]*=.*/y_res=432/}" $CONF_FILE
}

do_high_resolution() {
    sed -i "/^\[camera]/,/^\[/{s/^x_res[[:space:]]*=.*/x_res=1280/}" $CONF_FILE
    sed -i "/^\[camera]/,/^\[/{s/^y_res[[:space:]]*=.*/y_res=720/}" $CONF_FILE
}

do_camera_resolution() {
    CAMERA_RESOLUTION=$(whiptail --radiolist "Choose a resolution" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
                      "640x480" "Low resolution" OFF \
                      "768x432" "Default" ON \
                      "1280x720" "High resolution" OFF \
                      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$CAMERA_RESOLUTION" in
            640x480\ *) do_low_resolution ;;
            768x432\ *) do_default_resolution ;;
            1280x720\ *) do_high_resolution ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1
        esac || whiptail --msgbox "There was an error running option $CAMERA_RESOLUTION" 20 60 1
    fi
}

do_camera_device() {
    CAMERA_DEVICE_NUM=$(whiptail --inputbox "Enter a camera device" 20 60 "/dev/video0" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[camera]/,/^\[/{s/^camera_device[[:space:]]*=.*/camera_device=$CAMERA_DEVICE/}" $CONF_FILE
    fi
}

do_audio_hw_num() {
    AUDIO_HW_NUM=$(whiptail --inputbox "enter an audio hardware number" 20 60 "1" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[camera]/,/^\[/{s/^audio_hw_num[[:space:]]*=.*/audio_hw_num=$AUDIO_HW_NUM/}" $CONF_FILE
    fi
}

do_audio_device() {
    AUDIO_DEVICE=$(whiptail --inputbox "enter an audio device name" 20 60 "" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[camera]/,/^\[/{s/^audio_device[[:space:]]*=.*/audio_device=$AUDIO_DEVICE/}" $CONF_FILE
    fi
}

# no camera, no mic, type, x res, y res, camera device, audio hardware number
do_camera_menu() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Camera Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "C1 No Camera" "Disable the camera" \
        "C2 No Mic" "Disable the microphone" \
        "C3 Type" "Specify the audio/video encoder being used" \
        "C4 Resolution" "Set the capture resolution" \
        "C5 Camera Device" "Set the camera device" \
        "C6 Audio hardware number" "Set the audio hardware number" \
        "C7 Audio device" "Set the audio device name" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            C1\ *) do_no_camera ;;
            C2\ *) do_no_mic ;;
            C3\ *) do_camera_type ;;
            C4\ *) do_camera_resolution ;;
            C5\ *) do_camera_device ;;
            C6\ *) do_audio_hw_num ;;
            C7\ *) do_audio_device ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_ffmpeg_location() {
    FFMPEG_LOCATION=$(whiptail --inputbox "Enter the location of ffmpeg" 20 60 "/usr/bin/ffmpeg" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[ffmpeg]/,/^\[/{s/^ffmpeg_location[[:space:]]*=.*/ffmpeg_location=$FFMPEG_LOCATION/}" $CONF_FILE
    fi
}

do_v4l2_location() {
    V4L2_LOCATION=$(whiptail --inputbox "Enter the location of v4l2-ctl" 20 60 "/usr/bin/v4l2-ctl" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[ffmpeg]/,/^\[/{s/^v4l2-ctl_location[[:space:]]*=.*/v4l2-ctl_location=$V4L2_LOCATION/}" $CONF_FILE
    fi

}

do_audio_channels() {
    AUDIO_CHANNELS=$(whiptail --inputbox "Enter how many audio channels there are" 20 60 "1" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[ffmpeg]/,/^\[/{s/^audio_channels[[:space:]]*=.*/audio_channels=$AUDIO_CHANNELS/}" $CONF_FILE
    fi

}

do_audio_bitrate() {
    AUDIO_BITRATE=$(whiptail --inputbox "enter the sample rate for the audio stream in Kbps" 20 60 "32" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[ffmpeg]/,/^\[/{s/^audio_bitrate[[:space:]]*=.*/audio_bitrate=$AUDIO_BITRATE/}" $CONF_FILE
    fi

}

do_video_bitrate() {
    VIDEO_BITRATE=$(whiptail --inputbox "Enter the sample rate of the video stream in kbps" 20 60 "350" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[ffmpeg]/,/^\[/{s/^video_bitrate[[:space:]]*=.*/video_bitrate=$VIDEO_BITRATE/}" $CONF_FILE
    fi

}

# ffmpeg location, v4l2-ctl location, audio codec, audio channels, audio bitrate, audio sample rate, video codec, video bitrate, audio input format, audio input device, autio input options, audio output options, video input format, video input options, video output options, arecord path, arecord format
do_ffmpeg_menu() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "FFMPEG Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "F1 Location" "Set FFMPEG install location" \
        "F2 v4l2-ctl Location" "Set v4l20-ctl location" \
        "F4 audio channels" "Specify how many audio channels there are" \
        "F5 audio bitrate" "Specify the audio bitrate" \
        "F6 video bitrate" "Specify the video bitrate" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            F1\ *) do_ffmpeg_location ;;
            F2\ *) do_v4l2_location ;;
            F3\ *) do_audio_channels ;;
            F4\ *) do_audio_bitrate ;;
            F5\ *) do_video_bitrate ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_tts_type() {
    TTS_TYPE=$(whiptail --radiolist "Choose a robot type" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
               "espeak" "ESpeak" ON \
               "pico" "Pico" OFF \
               "festival" "Festival" OFF \
               "None" "None" OFF \
               3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[tts]/,/^\[/{s/^type[[:space:]]*=.*/type=$TTS_TYPE/}" $CONF_FILE

    fi
}

do_tts_volume() {
    TTS_VOLUME=$(whiptail --inputbox "Choose how loud you want TTS to be (0-100)" 20 60 "80" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[tts]/,/^\[/{s/^tts_volume[[:space:]]*=.*/tts_volume=$TTS_VOLUME/}" $CONF_FILE

    fi
}

do_tts_anon() {
    TTS_ANON=$(whiptail --yesno "Would you like to enable TTS For guest accounts?" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        sed -i "/^\[tts]/,/^\[/{s/^anon_tts[[:space:]]*=.*/anon_tts=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        sed -i "/^\[tts]/,/^\[/{s/^anon_tts[[:space:]]*=.*/anon_tts=false/}" $CONF_FILE
    else
        return $RET
    fi
}

do_tts_urls() {
    TTS_URLS=$(whiptail --yesno "Would you like to have TTS speak URLs?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        sed -i "/^\[tts]/,/^\[/{s/^filter_url_tts[[:space:]]*=.*/filter_url_tts=false/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        sed -i "/^\[tts]/,/^\[/{s/^filter_url_tts[[:space:]]*=.*/filter_url_tts=true/}" $CONF_FILE
    else
        return $RET
    fi
}

do_tts_ext_chat() {
    TTS_EXT_CHAT=$(whiptail --yesno "Would you like to enable extended chat?" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        sed -i "/^\[tts]/,/^\[/{s/^ext_chat[[:space:]]*=.*/ext_chat=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        sed -i "/^\[tts]/,/^\[/{s/^ext_chat[[:space:]]*=.*/ext_chat=false/}" $CONF_FILE
    else
        return $RET
    fi
}

do_tts_hw_number() {
    TTS_HW_NUM=$(whiptail --inputbox "Please enter your speaker hardware number." 20 60 "1" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[tts]/,/^\[/{s/^hw_num[[:space:]]*=.*/hw_num=$TTS_HW_NUM/}" $CONF_FILE
    fi
}

# type, volume, anon, filter urls, ext chat, hw number, espeak, festival, polly, pico
do_tts_menu() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "TTS Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "T1 Type" "Specify the TTS Engine you are using here." \
        "T2 Volume" "How loud you want it to be" \
        "T3 Anon" "Enable or disable anon messages" \
        "T4 Filter URLs" "Enable or Disable URls from being spoken" \
        "T5 Extended Chat" "Enable or Disable extended chat commands" \
        "T6 Hardware Number" "ALSA HW Number for your playback device" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            T1\ *) do_tts_type ;;
            T2\ *) do_tts_volume ;;
            T3\ *) do_tts_anon ;;
            T4\ *) do_tts_urls ;;
            T5\ *) do_tts_ext_chat ;;
            T6\ *) do_tts_hw_number ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_cozmo_forward_speed() {
    COZ_FWD_SPEED=$(whiptail --inputbox "Please enter a new forward speed." 20 60 "75" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^forward_speed[[:space:]]*=.*/forward_speed=$COZ_FWD_SPEED/}" $CONF_FILE
    fi
}

do_cozmo_turn_speed() {
    COZ_TURN_SPEED=$(whiptail --inputbox "Please enter a new turn speed." 20 60 "50" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^turn_speed[[:space:]]*=.*/turn_speed=$COZ_TURN_SPEED/}" $CONF_FILE
    fi
}

do_cozmo_volume() {
    COZ_VOLUME=$(whiptail --inputbox "Please enter your speaker hardware number." 20 60 "100" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^volume[[:space:]]*=.*/volume=$COZ_VOLUME/}" $CONF_FILE
    fi
}

do_cozmo_charge_high() {
    COZ_CHARGE_HIGH=$(whiptail --inputbox "Please enter a new charge high state." 20 60 "4.79" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^charge_high[[:space:]]*=.*/charge_high=$COZ_CHARGE_HIGH/}" $CONF_FILE
    fi
}

do_cozmo_charge_low() {
    COZ_CHARGE_LOW=$(whiptail --inputbox "Please enter a new charge low state." 20 60 "3.6" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^hw_num[[:space:]]*=.*/hw_num=$COZ_CHARGE_LOW/}" $CONF_FILE
    fi
}

do_cozmo_send_online() {
       whiptail --msgbox "There's nothing here yet." 20 60 1

}

do_cozmo_stay_on_dock() {
    COZ_STAY_ON_DOCK=$(whiptail --yesno "Would you like to enable staying on the dock?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^stay_on_dock[[:space:]]*=.*/stay_on_dock=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^stay_on_dock[[:space:]]*=.*/stay_on_dock=false/}" $CONF_FILE
    else
        return $RET
    fi
}

do_cozmo_annotate() {
    COZ_ANNOTATE=$(whiptail --yesno "Would you like to annotation?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^annotated[[:space:]]*=.*/annotated=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^annotated[[:space:]]*=.*/annotated=false/}" $CONF_FILE
    else
        return $RET
    fi
}  

do_cozmo_color() {
    COZ_COLOR=$(whiptail --yesno "Would you like to enable color?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^colour[[:space:]]*=.*/colour=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^colour[[:space:]]*=.*/colour=false/}" $CONF_FILE
    else
        return $RET
    fi
}

do_board_cozmo() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Cozmo Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "C1 Forward Speed" "Set the forward speed" \
        "C2 Turn Speed" "Set the turn speed" \
        "C3 Volume" "Set the volume" \
        "C4 Charge High" "Set the high charge value" \
        "C5 Charge Low" "Set the low charge value" \
        "C6 Send Online Status" "Enable sending status" \
        "C7 Stay On Dock" "Enable staying on the dock" \
        "C8 Annotate" "Show CV in stream" \
        "C9 Color" "Send color stream" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            C1\ *) do_cozmo_forward_speed ;;
            C2\ *) do_cozmo_turn_speed ;;
            C3\ *) do_cozmo_volume ;;
            C4\ *) do_cozmo_charge_high ;;
            C5\ *) do_cozmo_charge_low ;;
            C6\ *) do_cozmo_send_online ;;
            C7\ *) do_cozmo_stay_on_dock ;;
            C8\ *) do_cozmo_annotate ;;
            C9\ *) do_cozmo_color ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi

}

do_adafruit_address() {
    ADAFRUIT_ADDRESS=$(whiptail --inputbox "Please enter a new charge low state." 20 60 "3.6" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^hw_num[[:space:]]*=.*/hw_num=$ADAFRUIT_ADDRESS/}" $CONF_FILE
    fi
}

do_adafruit_frequency() {
    ADAFRUIT_FREQUENCY=$(whiptail --inputbox "Please enter a new charge low state." 20 60 "3.6" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[cozmo]/,/^\[/{s/^hw_num[[:space:]]*=.*/hw_num=$ADAFRUIT_FREQUENCY/}" $CONF_FILE
    fi
}

do_more_debug() {
    MORE_DEBUG=$(whiptail --yesno "Would you like to enable more debug?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        
        sed -i "/^\[adafruit_pwm]/,/^\[/{s/^more_debug[[:space:]]*=.*/more_debug=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        
        sed -i "/^\[adafruit_pwm]/,/^\[/{s/^more_debug[[:space:]]*=.*/more_debug=false/}" $CONF_FILE
    else
        return $RET
    fi
}

do_board_adafruit() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Adafruit PWM Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "A1 Address" "Set the address" \
        "A2 Frequency" "Set the PWM Frequency" \
        "A3 More Debug" "Enable more verbose debugging" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            A1\ *) do_adafruit_address ;;
            A2\ *) do_adafruit_frequency ;;
            A3\ *) do_more_debug ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_board_owi() {
    whiptail --msgbox "There's nothing here yet." 20 60 1
}

do_serial_device() {
    SERIAL_DEVICE=$(whiptail --inputbox "Please enter a new serial device." 20 60 "/dev/ttyACM0" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[serial]/,/^\[/{s/^serial_device[[:space:]]*=.*/serial_device=$SERIAL_DEVICE/}" $CONF_FILE
    fi

}

do_serial_baud_rate() {
    BAUD_RATE=$(whiptail --inputbox "Please enter a new baud rate." 20 60 "9600" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[serial]/,/^\[/{s/^baud_rate[[:space:]]*=.*/baud_rate=$BAUD_RATE/}" $CONF_FILE
    fi

}

do_board_serial() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Serial Board Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "S1 Serial Device" "Set the serial device" \
        "S2 Baud Rate" "Set the baud rate" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            S1\ *) do_serial_device ;;
            S2\ *) do_serial_baud_rate ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_day_speed() {
    DAY_SPEED=$(whiptail --inputbox "Please enter a new day speed." 20 60 "255" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motor_hat]/,/^\[/{s/^day_speed[[:space:]]*=.*/day_speed=$DAY_SPEED/}" $CONF_FILE
    fi

}

do_night_speed() {
    NIGHT_SPEED=$(whiptail --inputbox "Please enter a new night speed." 20 60 "255" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motor_hat]/,/^\[/{s/^night_speed[[:space:]]*=.*/night_speed=$NIGHT_SPEED/}" $CONF_FILE
    fi

}

do_motor_hat_turning_speed() {
    TURNING_SPEED=$(whiptail --inputbox "Please enter a new turning speed." 20 60 "250" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motor_hat]/,/^\[/{s/^turning_speed[[:space:]]*=.*/turning_speed=$TURNING_SPEED/}" $CONF_FILE
    fi

}

do_motor_hat_forward() {
    MOTOR_HAT_FORWARD=$(whiptail --inputbox "Please enter a new forward configuration." 20 60 "[-1,1,-1,1]" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motor_hat]/,/^\[/{s/^forward[[:space:]]*=.*/forward=$MOTOR_HAT_FORWARD/}" $CONF_FILE
    fi

}

do_motor_hat_left() {
    MOTOR_HAT_LEFT=$(whiptail --inputbox "Please enter a new charge left configuration." 20 60 "[1,1,1,1]" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motor_hat]/,/^\[/{s/^left[[:space:]]*=.*/left=$MOTOR_HAT_LEFT/}" $CONF_FILE
    fi

}

do_board_motor_hat() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Motor Hat Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "M1  Day speed" "Set the speed during the day" \
        "M2  Night speed" "Set the speed during the night" \
        "M3  Turning speed" "Set the turning speed" \
        "M4  Forward" "Set the forward configuration" \
        "M5  Left" "Set the left configuration" \
        "M6  Slow for low battery" "Slow down when the battery is low" \
        "M7  Charge Hours" "How many hours to charge the battery for" \
        "M8  Discharge Hours" "How many hours to discharge the battery for" \
        "M9  Charge Check Interval" "How long between each charge check" \
        "M10 Charge IO Number" "Charge IO Number" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            M1\ *) do_day_speed ;;
            M2\ *) do_night_speed ;;
            M3\ *) do_motor_hat_turning_speed ;;
            M4\ *) do_motor_hat_forward ;;
            M5\ *) do_motor_hat_left ;;
            M6\ *) do_slow_for_low_battery ;;
            M7\ *) do_charge_hours ;;
            M8\ *) do_discharge_hours ;;
            M9\ *) do_charge_check_interval ;;
            M10\ *) do_charge_io_number ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_gopigo2_drive_time() {
    GOPIGO2_DRIVE_TIME=$(whiptail --inputbox "Please enter a new drive time." 20 60 "0.35" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[gopigo2]/,/^\[/{s/^drive_time[[:space:]]*=.*/drive_time=$GOPIGO2_DRIVE_TIME/}" $CONF_FILE
    fi

}

do_gopigo2_turn_time() {
    GOPIGO2_TURN_TIME=$(whiptail --inputbox "Please enter a new turn time." 20 60 "0.15" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[gopigo2]/,/^\[/{s/^hw_num[[:space:]]*=.*/hw_num=$GOPIGO2_TURN_TIME/}" $CONF_FILE
    fi

}

do_board_gopigo2() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "GoPiGo2 Config" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "G1 Drive Time" "Drive time" \
        "G2 Turn Time" "Turn time" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            G1\ *) do_gopigo2_drive_time ;;
            G2\ *) do_gopigo2_turn_time ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_gopigo3_drive_time() {
    GOPIGO3_DRIVE_TIME=$(whiptail --inputbox "Please enter a new drive time." 20 60 "0.35" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[gopigo3]/,/^\[/{s/^drive_time[[:space:]]*=.*/drive_time=$GOPIGO3_DRIVE_TIME/}" $CONF_FILE
    fi

}

do_gopigo3_turn_time() {
    GOPIGO3_TURN_TIME=$(whiptail --inputbox "Please enter a new turn time." 20 60 "0.15" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[gopigo3]/,/^\[/{s/^turn_time[[:space:]]*=.*/turn_time=$GOPIGO3_TURN_TIME/}" $CONF_FILE
    fi

}

do_board_gopigo3() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "GoPiGo3 Config" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "G1 Drive Time" "Drive time" \
        "G2 Turn Time" "Turn time" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            G1\ *) do_gopigo3_drive_time ;;
            G2\ *) do_gopigo3_turn_time ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_step_pin_forward() {
    STEP_PIN_FORWARD=$(whiptail --inputbox "Please enter a new step pin forward." 20 60 "12,16" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[l298n]/,/^\[/{s/^StepPinForward[[:space:]]*=.*/StepPinForward=$STEP_PIN_FORWARD/}" $CONF_FILE
    fi

}

do_step_pin_backward() {
    STEP_PIN_BACKWARDS=$(whiptail --inputbox "Please enter a new step pin backward." 20 60 "11,15" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[l298n]/,/^\[/{s/^StepPinBackward[[:space:]]*=.*/StepPinBackward=$STEP_PIN_BACKWARDS/}" $CONF_FILE
    fi

}

do_step_pin_left() {
    STEP_PIN_LEFT=$(whiptail --inputbox "Please enter a new step pin left." 20 60 "15,12" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[l298n]/,/^\[/{s/^StepPinLeft[[:space:]]*=.*/StepPinLeft=$STEP_PIN_LEFT/}" $CONF_FILE
    fi

}

do_step_pin_right() {
    STEP_PIN_RIGHT=$(whiptail --inputbox "Please enter a new step pin right." 20 60 "11,16" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[l298n]/,/^\[/{s/^StepPinRight[[:space:]]*=.*/StepPinRight=$STEP_PIN_RIGHT/}" $CONF_FILE
    fi

}

do_sleep_time() {
    SLEEP_TIME=$(whiptail --inputbox "Please enter a new step pin right." 20 60 "11,16" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[l298n]/,/^\[/{s/^sleeptime[[:space:]]*=.*/sleeptime=$SLEEP_TIME/}" $CONF_FILE
    fi

}

do_rotate_times() {
    ROTATE_TIMES=$(whiptail --inputbox "Please enter a new step pin right." 20 60 "11,16" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[l298n]/,/^\[/{s/^rotatetimes[[:space:]]*=.*/rotatetimes=$ROTATE_TIMES/}" $CONF_FILE
    fi

}

do_board_l298n() {
    FUN=$(whiptail --tile "Let's Robot Config" --menu "L298N Config" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "L1 Step Pin Forward" "Set forward step pin" \
        "L2 Step Pin Backward" "Set backward step pin" \
        "L3 Step Pin Left" "Set left step pin" \
        "L4 Step Pin Right" "Set right step pin" \
        "L5 Sleep Time" "Set the sleep time" \
        "L6 Rotate Times" "Set the rotate times" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            L1\ *) do_step_pin_forward ;;
            L2\ *) do_step_pin_backward ;;
            L3\ *) do_step_pin_left ;;
            L4\ *) do_step_pin_right ;;
            L5\ *) do_sleep_time ;;
            L6\ *) do_rotate_times ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_motor_delay() {
    MOTOR_DELAY=$(whiptail --inputbox "Please enter a new motor delay value." 20 60 "0.3" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^MotorDelay[[:space:]]*=.*/MotorDelay=$MOTOR_DELAY/}" $CONF_FILE
    fi

}

do_motor_1a() {
    MOTOR_1A=$(whiptail --inputbox "Please enter a new motor 1a setting." 20 60 "24" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^Motor1A[[:space:]]*=.*/Motor1A=$MOTOR_1A/}" $CONF_FILE
    fi

}

do_motor_1b() {
    MOTOR_1B=$(whiptail --inputbox "Please enter a new motor 1b setting." 20 60 "27" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^Motor1B[[:space:]]*=.*/Motor1B=$MOTOR_1B/}" $CONF_FILE
    fi

}

do_motor_1_enable() {
    MOTOR_1_ENABLE=$(whiptail --inputbox "Please enter a new motor 1 enable setting." 20 60 "5" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^Motor1Enable[[:space:]]*=.*/Motor1Enable=$MOTOR_1_ENABLE/}" $CONF_FILE
    fi

}

do_motor_2a() {
    MOTOR_2A=$(whiptail --inputbox "Please enter a new motor 2a setting." 20 60 "6" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^Motor2A[[:space:]]*=.*/Motor2A=$MOTOR_2A/}" $CONF_FILE
    fi

}

do_motor_2b() {
    MOTOR_2B=$(whiptail --inputbox "Please enter a new motor 2b setting." 20 60 "22" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^Motor2B[[:space:]]*=.*/Motor2B=$MOTOR_2B/}" $CONF_FILE
    fi

}

do_motor_2_enable() {
    MOTOR_2_ENABLE=$(whiptail --inputbox "Please enter a new motor 2 enable setting." 20 60 "17" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^Motor2Enable[[:space:]]*=.*/Motor2Enable=$MOTOR_2_ENABLE/}" $CONF_FILE
    fi

}

do_motor_3a() {
    MOTOR_3A=$(whiptail --inputbox "Please enter a new motor 3a setting." 20 60 "23" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^Motor3A[[:space:]]*=.*/Motor3A=$MOTOR_3A/}" $CONF_FILE
    fi

}

do_motor_3b() {
    MOTOR_3B=$(whiptail --inputbox "Please enter a new motor 3b setting." 20 60 "16" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^Motor3B[[:space:]]*=.*/Motor3B=$MOTOR_3B/}" $CONF_FILE
    fi

}

do_motor_3_enable() {
    MOTOR_3_ENABLE=$(whiptail --inputbox "Please enter a new motor 3 enable setting." 20 60 "12" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^Motor3Enable[[:space:]]*=.*/Motor3Enable=$MOTOR_3_ENABLE/}" $CONF_FILE
    fi

}

do_motor_4a() {
    MOTOR_4A=$(whiptail --inputbox "Please enter a new motor 4a setting." 20 60 "13" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^Motor4A[[:space:]]*=.*/Motor4A=$MOTOR_4A/}" $CONF_FILE
    fi

}

do_motor_4b() {
    MOTOR_4B=$(whiptail --inputbox "Please enter a new motor 4b setting." 20 60 "18" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^Motor4B[[:space:]]*=.*/Motor4B=$MOTOR_4B/}" $CONF_FILE
    fi

}

do_motor_4_enable() {
    MOTOR_4_ENABLE=$(whiptail --inputbox "Please enter a new motor 4 enable setting." 20 60 "25" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[motozero]/,/^\[/{s/^motor_4_enable[[:space:]]*=.*/motor_4_enable=$MOTOR_4_ENABLE/}" $CONF_FILE
    fi

}

do_board_motozero() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Motozero Config" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "M1  Motor Delay" "Set the motor delay" \
        "M2  Motor 1A" "Set Motor 1A" \
        "M3  Motor 1B" "Set motor 1b" \
        "M4  Motor 1 enable" "Set motor 1 enable" \
        "M5  Motor 2a" "set motor 2a" \
        "M6  Motor 2b" "set motor 2b" \
        "M7  Motor 2 enable" "Set motor 2 enable" \
        "M8  Motor 3a" "set motor 3a" \
        "M9  Motor 3b" "set motor 3b" \
        "M10 Motor 3 enable" "Set motor 3 enable" \
        "M11 Motor 4a" "set motor 4a" \
        "M12 Motor 4b" "set motor 4b" \
        "M13 Motor 4 enable" "Set motor 4 enable" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then 
        case "$FUN" in
            M1\ *) do_motor_delay ;;
            M2\ *) do_motor_1a ;;
            M3\ *) do_motor_1b ;;
            M4\ *) do_motor_1_enable ;;
            M5\ *) do_motor_2a ;;
            M6\ *) do_motor_2b ;;
            M7\ *) do_motor_2_enable ;;
            M8\ *) do_motor_3a ;;
            M9\ *) do_motor_3b ;;
            M10\ *)do_motor_3_enable ;;
            M11\ *)do_motor_4a ;;
            M12\ *)do_motor_4b ;;
            M13\ *)do_motor_4_enable ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_pololu_driving_speed() {
    POLOLU_DRIVING_SPEED=$(whiptail --inputbox "Please enter a new pololu driver speed." 20 60 "25" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[pololu]/,/^\[/{s/^drivingSpeed[[:space:]]*=.*/drivingSpeed=$POLOLU_DRIVING_SPEED/}" $CONF_FILE
    fi
}

do_board_pololu() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Pololu Config" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "P1 Driving Speed" "Set the driving speed" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            P1\ *) do_pololu_driving_speed ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_mc33926_driving_speed() {
    MC33926_DRIVING_SPEED=$(whiptail --inputbox "Please enter a new pololu driver speed." 20 60 "25" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[pololu]/,/^\[/{s/^drivingSpeed[[:space:]]*=.*/drivingSpeed=$MC33926_DRIVING_SPEED/}" $CONF_FILE
    fi
}

do_board_mc33926() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "MC33926 Config" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "M1 Driving Speed" "Set the driving speed" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            M1\ *) do_mc33926_driving_speed ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_led_rotate() {
    LED_ROTATE=$(whiptail --inputbox "Please enter a new LED rotate value." 20 60 "25" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[max7219]/,/^\[/{s/^ledrotate[[:space:]]*=.*/ledrotate=$LED_ROTATE/}" $CONF_FILE
    fi
}

do_board_max7219() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Max7219 Config" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "M1 LED Rotate" "Rotate the LEDs" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            P1\ *) do_led_rotate ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

# cozmo, adafruit pwm, owi arm, serial, motor hat, gopigo2, gopigo3, l298n, motozero, pololu, mc33926, max7219
do_board_menu() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Board options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "B1  Cozmo" "Configure Cozmo settings" \
        "B2  Adafruit PWM" "Configure Adafruit PWM settings" \
        "B3  OWI Arm" "Configure OWI Arm settings" \
        "B4  Serial" "Configure Serial settings" \
        "B5  Motor Hat" "Configure Motor Hat settings" \
        "B6  GoPiGo2" "Configure GoPiGo2 settings" \
        "B7  GoPiGo3" "Configure GoPiGo3 settings" \
        "B7  L298N" "Configure L298N settings" \
        "B8  Motozero" "Configure Motozero settings" \
        "B9  Pololu" "Configure Pololu settings" \
        "B10 MC33926" "Configure MC33926 settings" \
        "B11 Max7219" "Configure Max7219 settings" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            B1\ *) do_board_cozmo ;;
            B2\ *) do_board_adafruit ;;
            B3\ *) do_board_owi ;;
            B4\ *) do_board_serial ;;
            B5\ *) do_board_motor_hat ;;
            B6\ *) do_board_gopigo2 ;;
            B7\ *) do_board_gopigo3 ;;
            B8\ *) do_board_l298n ;;
            B9\ *) do_board_motozero ;;
            B10\ *) do_board_pololu ;;
            B11\ *) do_board_mc33926 ;;
            B12\ *) do_board_max7219 ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_messenger_enable() {
    MESSENGER_ENABLE=$(whiptail --yesno "Would you like to enable messenger?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        
        sed -i "/^\[messenger]/,/^\[/{s/^enable[[:space:]]*=.*/enable=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        
        sed -i "/^\[messenger]/,/^\[/{s/^enable[[:space:]]*=.*/enable=false/}" $CONF_FILE
    else
        return $RET
    fi
}

do_messenger_host() {
    MESSENGER_HOST=$(whiptail --inputbox "Please enter a new messenger host." 20 60 "letsrobot.tv" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[messenger]/,/^\[/{s/^host[[:space:]]*=.*/host=$MESSENGER_HOST/}" $CONF_FILE
    fi
}

do_messenger_port() {
    MESSENGER_PORT=$(whiptail --inputbox "Please enter a new messenget port." 20 60 "8000" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[messenger]/,/^\[/{s/^port[[:space:]]*=.*/port=$MESSENGER_PORT/}" $CONF_FILE
    fi
}

do_messenger_username() {
    MESSENGER_USERNAME=$(whiptail --inputbox "Please enter a new username." 20 60 "" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[messenger]/,/^\[/{s/^username[[:space:]]*=.*/username=$MESSENGER_USERNAME/}" $CONF_FILE
    fi

}

do_messenger_password() {
    MESSENGER_PASSWD=$(whiptail --passwordbox "Please enter your password" 20 60 "" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        sed -i "/^\[messenger]/,/^\[/{s/^password[[:space:]]*=.*/password=$MESSENGER_PASSWD/}" $CONF_FILE
    fi

}

do_messenger_name() {
    MESSENGER_NAME=$(whiptail --inputbox "Please enter a new robot name." 20 60 "" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[messenger]/,/^\[/{s/^robot_name[[:space:]]*=.*/robot_name=$MESSENGER_NAME/}" $CONF_FILE
    fi

}

do_messenger_menu() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Messenger Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "M1 Enable" "Enable Messenger" \
        "M2 Host" "Messenger Host" \
        "M3 Port" "Messenger Port" \
        "M4 Username" "Messenger Username" \
        "M5 Password" "Messenger Helper" \
        "M6 Robot Name" "Username for robot helper" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            M1\ *) do_messenger_enable ;;
            M2\ *) do_messenger_host ;;
            M3\ *) do_messenger_port ;;
            M4\ *) do_messenger_username ;;
            M5\ *) do_messenger_password ;;
            M6\ *) do_messenger_name ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_custom_hardware() {
    CUSTOM_HARDWARE=$(whiptail --yesno "Would you like to enable custom hardware?" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^custom_hardware[[:space:]]*=.*/custom_hardware=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^custom_hardware[[:space:]]*=.*/custom_hardware=false/}" $CONF_FILE
    else
        return $RET
    fi

}

do_custom_tts() {
    CUSTOM_TTS=$(whiptail --yesno "Would you like to enable custom TTS?" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^custom_tts[[:space:]]*=.*/custom_tts=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^custom_tts[[:space:]]*=.*/custom_tts=false/}" $CONF_FILE
    else
        return $RET
    fi

}

do_custom_chat() {
    CUSTOM_CHAT=$(whiptail --yesno "Would you like to enable custom chat?" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^custom_chat[[:space:]]*=.*/custom_chat=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^custom_chat[[:space:]]*=.*/custom_chat=false/}" $CONF_FILE
    else
        return $RET
    fi

}

do_custom_video() {
    CUSTOM_VIDEO=$(whiptail --yesno "Would you like to enable custom video?" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^custom_video[[:space:]]*=.*/custom_video=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^custom_video[[:space:]]*=.*/custom_video=false/}" $CONF_FILE
    else
        return $RET
    fi

}

do_watchdog() {
    WATCHDOG=$(whiptail --yesno "Would you like to enable watchdog??" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^watchdog[[:space:]]*=.*/watchdog=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^watchdog[[:space:]]*=.*/watchdog=false/}" $CONF_FILE
    else
        return $RET
    fi

}

do_async() {
    ASYNC=$(whiptail --yesno "Would you like to enable asynchronous command handling?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^enable_async[[:space:]]*=.*/enable_async=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^enable_async[[:space:]]*=.*/enable_async=false/}" $CONF_FILE
    else
        return $RET
    fi

}

do_no_chat_server() {
    CHAT_SERVER=$(whiptail --yesno "Would you like to disable connection to the chat server?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^no_chat_server[[:space:]]*=.*/no_chat_server=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^no_chat_server[[:space:]]*=.*/no_chat_server=false/}" $CONF_FILE
    else
        return $RET
    fi

}

do_debug_messages() {
    DEBUG_MESSAGES=$(whiptail --yesno "Would you like to enable debug messages?" --defaultno 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^debug_messages[[:space:]]*=.*/debug_messages=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^debug_messages[[:space:]]*=.*/debug_messages=false/}" $CONF_FILE
    else
        return $RET
    fi

}

do_api_server() {
    MESSENGER_NAME=$(whiptail --inputbox "Please enter a new api server." 20 60 "api.letsrobot.tv" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^api_server[[:space:]]*=.*/api_server=$MESSENGER_NAME/}" $CONF_FILE
    fi

}

do_info_server() {
    MESSENGER_NAME=$(whiptail --inputbox "Please enter a new info server." 20 60 "letsrobot.tv" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^info_server[[:space:]]*=.*/info_server=$MESSENGER_NAME/}" $CONF_FILE
    fi

}

do_check_frequency() {
    MESSENGER_NAME=$(whiptail --inputbox "Please enter a new check frequency." 20 60 "120" $WT_WIDTH $WT_HEIGHT $WT_MENU_HEIGHT 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^check_freq[[:space:]]*=.*/check_freq=$MESSENGER_NAME/}" $CONF_FILE
    fi

}

do_secure_cert() {
    SECURE_CERT=$(whiptail --yesno "Would you like to require secure certs?" 20 60 2 3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^secure_cert[[:space:]]*=.*/secure_cert=true/}" $CONF_FILE
    elif [ $RET -eq 1 ]; then
        
        sed -i "/^\[misc]/,/^\[/{s/^secure_cert[[:space:]]*=.*/secure_cert=false/}" $CONF_FILE
    else
        return $RET
    fi

}

do_misc_menu() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Miscellaneous Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "M1  Custom Hardware" "Enable custom hardware" \
        "M2  Custom TTS" "Enable custom TTS" \
        "M3  Custom Chat" "Enable custom chat" \
        "M4  Custom Video" "Enable custom video" \
        "M5  Whatdog" "Enable watchdog timer" \
        "M6  Enable async" "enable asynchronous command handling" \
        "M7  No Chat Server" "Disable chat server connection" \
        "M8  Debug Messages" "Enable debug messages" \
        "M9  Info server" "Server the robot connects to" \
        "M10 API Server" "API server the robot connects to" \
        "M11 Check Internet" "enable periodically checking the internet connection" \
        "M12 Check Frequency" "Frequency to check the internet connection" \
        "M13 Secure Cert" "Enable requiring valid ssl certs" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            M1\ *) do_custom_hardware ;;
            M2\ *) do_custom_tts ;;
            M3\ *) do_cutsom_chat ;;
            M4\ *) do_custom_video ;;
            M5\ *) do_watchdog ;;
            M6\ *) do_async ;;
            M7\ *) do_no_chat_server ;;
            M8\ *) do_debug_messages ;;
            M9\ *) do_info_server ;;
            M10\ *) do_api_server ;;
            M11\ *) do_check_internet ;;
            M12\ *) do_check_frequency ;;
            M13\ *) do_secure_cert ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi

}

# Setup parallaxy kit
do_parallaxy_setup() {
    whiptail --msgbox "There's nothing here yet." 20 60 1
}

# Setup botington kit
do_bottington_setup() {
    whiptail --msgbox "There's nothing here yet." 20 60 1
}

# setup telly kit
do_telly_setup() {
    whiptail --msgbox "There's nothing here yet." 20 60 1
}

do_kit_menu() {
    FUN=$(whiptail --title "Let's Robot Config" --menu "Kit Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "K1 Parallaxy" "Setup a Parallaxy kit" \
        "K2 Bottington" "Setup a Bottington kit" \
        "K3 Telly" "Setup a Telly Bot kit" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            K1\ *) do_parallaxy_setup ;;
            K2\ *) do_bottington_setup ;;
            K3\ *) do_telly_setup ;;
            *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_finish() {
    whiptail --yesno "Are you sure you're finished?" 20 60 2
    if [ $? -eq 0 ]; then # yes
        exit 0
    fi
}

# In testing, the next 3 lines will cause an error that can safely be ignored
# the copy command will fail. "cp: cannot stat '~/letsrobot/letsrobot.sample.conf': no such file or directory"
CONF_FILE="/home/$USER/letsrobot.conf"
REPO_DIR="/home/$USER/letsrobot"
cp ${REPO_DIR}/letsrobot.sample.conf $CONF_FILE
if [ "$INTERACTIVE" = true ]; then
    calc_wt_size
    while true; do
        FUN=$(whiptail --title "Let's Robot Config" --menu "Main Menu" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
            "1  Robot" "Set basic robot parameters here" \
            "2  Camera" "Set camera and microphone settings here" \
            "3  ffmpeg" "Set FFMPEG settings here" \
            "4  TTS" "Set Text-To-Speech settings here" \
            "5  Board" "Set board specific settings here" \
            "6  Messenger" "Optional settings used when sending messages from the robot back to the chat" \
            "7  Misc" "Miscellanious options you probably don't need to change" \
            "8  Kit" "Quickly set up a standard kit" \
            3>&1 1>&2 2>&3)
        RET=$?
        if [ $RET -eq 1 ]; then
            do_finish
        elif [ $RET -eq 0 ]; then
            case "$FUN" in
                1\ *) do_robot_menu ;;
                2\ *) do_camera_menu ;;
                3\ *) do_ffmpeg_menu ;;
                4\ *) do_tts_menu ;;
                5\ *) do_board_menu ;;
                6\ *) do_messenger_menu ;;
                7\ *) do_misc_menu ;;
                8\ *) do_kit_menu ;;
                *) whiptail --msgbox "Programmer error: Unrecognized option" 20 60 1 ;;
            esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
        fi
    done
fi
